[tool.poetry]
name = "litbee"
version = "0.1.2"
description = "align (en, de, zh) texts via streamlit "
authors = ["ffreemt"]
license = "MIT"
readme = "README1.md"
repository = "https://github.com/ffreemt/litbee"

[tool.poetry.dependencies]
python = "^3.8.3"
logzero = "^1.7.0"
icecream = "^2.1.1"
install = "^1.3.5"
set-loglevel = "^0.1.2"
streamlit-multipage = "^0.0.18"
cchardet = "^2.1.7"
streamlit-aggrid = "^0.2.3"
dzbee = "^0.1.1-alpha.2"
loguru = "^0.6.0"
streamlit = "^1.9.2"
debee = "^0.1.0-alpha.2"
ezbee = "^0.1.0"
streamlit-option-menu = "^0.3.2"
plotly = "^5.8.0"
hanzidentifier = "^1.0.2"
opencc-python-reimplemented = "^0.1.6"
tabulate = "^0.8.9"
httpx = "^0.23.0"
html2text = "^2020.1.16"
readability-lxml = "^0.8.1"

[tool.poe.executor]
type = "poetry"

[tool.poe.tasks]
memo = "echo poe test or poetry run poe test"
test = "pytest tests"
pyright = "pyright litbee"
flake8 = "flake8 litbee --ignore F401,E501,F841"
check = ["pyright", "flake8"]
export = "poetry export --without-hashes -f requirements.txt -o requirements.txt"
build = "poetry build"
_publish = "poetry publish"
release = ["test", "build", "_publish"]
lint = { cmd = "pylint litbee" }
isort = "isort tests litbee"
black = "black tests litbee"
format = ["isort", "black"]
docstyle = "pydocstyle --convention=google tests litbee"
cpapp = "cp app.py litbee"
prerelease = {cmd = "poetry version prerelease && sync-version"}
git = {cmd = "git push && git push github"}
deploy = ["cpapp", "export", "git"]
tunnel = {cmd = "ssh -CN ip_or_hostname_defined_in_hosts -L 9091:127.0.0.1:9091"}

[tool.poetry.dev-dependencies]
pytest = "^7.1"
flake8 = "^3.9.2"
pydocstyle = "^6.1.1"
toml = "^0.10.2"
# tbump = "^6.3.2"
poethepoet = "^0.10.0"

[tool.poetry.scripts]
"litbee" = "litbee.__main__:app"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q --doctest-modules"
log_cli = true
testpaths = [
    "tests",
    # "integration",
]

[tool.black]
skip-string-normalization = 0

[tool.isort]
profile = "black"
multi_line_output = 3
